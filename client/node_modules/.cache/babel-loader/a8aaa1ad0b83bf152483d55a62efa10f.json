{"ast":null,"code":"import _defineProperty from \"/home/predator/Documents/mern/mern_shopping_list/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// A reducer is basically where our actual state is going to go\nimport uuid from 'uuid';\nimport { GET_ITEMS, ADD_ITEM, DEL_ITEM } from '../actions/types';\nconst initialState = {\n  items: [{\n    id: uuid(),\n    name: \"Milk\"\n  }, {\n    id: uuid(),\n    name: \"Eggs\"\n  }, {\n    id: uuid(),\n    name: \"Flowers\"\n  }, {\n    id: uuid(),\n    name: \"Chicken\"\n  }] // actually this data will come from the database\n\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_ITEMS:\n      return _objectSpread({}, state);\n\n    case DEL_ITEM:\n      return _objectSpread({}, state, {\n        items: state.items.filter(item => item.id !== action.extraData)\n      });\n\n    case ADD_ITEM:\n      return _objectSpread({}, state, {\n        items: [action.extraData, ...state.items]\n      });\n\n    default:\n      return state;\n  } //when an action comes in we want to run a switch case for the type of action we can also use if else\n\n}); //takes in two parameters initialstate and the action(its and obj and will have a type) to be performed(i.e get add or delete)","map":{"version":3,"sources":["/home/predator/Documents/mern/mern_shopping_list/client/src/reducers/itemReducer.js"],"names":["uuid","GET_ITEMS","ADD_ITEM","DEL_ITEM","initialState","items","id","name","state","action","type","filter","item","extraData"],"mappings":";;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAG,CACJ;AAAEC,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,IAAI,EAAE;AAApB,GADI,EAEJ;AAAED,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,IAAI,EAAE;AAApB,GAFI,EAGJ;AAAED,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,IAAI,EAAE;AAApB,GAHI,EAIJ;AAAED,IAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,IAAAA,IAAI,EAAE;AAApB,GAJI,CADS,CAMf;;AANe,CAArB;AASA,gBAAe,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAE7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,SAAL;AACI,+BACOO,KADP;;AAIJ,SAAKL,QAAL;AACI,+BACOK,KADP;AAEIH,QAAAA,KAAK,EAACG,KAAK,CAACH,KAAN,CAAYM,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYG,MAAM,CAACI,SAA9C;AAFV;;AAMJ,SAAKX,QAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,KAAK,EAAE,CAACI,MAAM,CAACI,SAAR,EAAmB,GAAGL,KAAK,CAACH,KAA5B;AAFX;;AAIJ;AACI,aAAOG,KAAP;AAnBR,GAF6C,CAuB5C;;AAEJ,CAzBD,E,CAyBC","sourcesContent":["// A reducer is basically where our actual state is going to go\nimport uuid from 'uuid';\nimport { GET_ITEMS, ADD_ITEM, DEL_ITEM } from '../actions/types';\n\nconst initialState = {\n    items : [\n        { id: uuid(), name: \"Milk\"},\n        { id: uuid(), name: \"Eggs\"},\n        { id: uuid(), name: \"Flowers\"},\n        { id: uuid(), name: \"Chicken\"}\n    ] // actually this data will come from the database\n};\n\nexport default (state = initialState, action) => {\n\n    switch(action.type){\n        case GET_ITEMS:\n            return {\n                ...state //will return the initial state when action is of type GET_ITEMS\n            }\n\n        case DEL_ITEM:\n            return {\n                ...state,\n                items:state.items.filter(item => item.id !== action.extraData)\n\n            }\n\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [action.extraData, ...state.items]\n            }\n        default:\n            return state;\n\n    }//when an action comes in we want to run a switch case for the type of action we can also use if else\n\n}//takes in two parameters initialstate and the action(its and obj and will have a type) to be performed(i.e get add or delete)"]},"metadata":{},"sourceType":"module"}